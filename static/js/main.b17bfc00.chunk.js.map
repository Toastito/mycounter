{"version":3,"sources":["components/cart.jsx","components/mycounter.jsx","components/lstcounters.jsx","App.js","serviceWorker.js","index.js"],"names":["Cart","props","className","href","totalItems","MyCounter","this","setBadgeClasses","formatCt","onClick","onIncrement","counter","onDelete","id","badgeclasses","value","Component","LstCounters","onClearCounters","counters","map","key","App","state","handleAddButton","tempcounters","i","indexOf","setState","handleDeleteButton","countersId","filter","c","handleClearCounters","ct","Fragment","item","reduce","prev","next","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRAWeA,EATF,SAACC,GACV,OAAQ,yBAAKC,UAAU,8BACvB,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,qBAEI,0BAAMD,UAAU,+BAA+BD,EAAMG,eCmB9CC,E,iLAtBD,IAAD,OACL,OACA,6BACI,0BAAMH,UAAWI,KAAKC,mBAAoBD,KAAKE,YAC/C,4BAAQC,QAAS,kBAAM,EAAKR,MAAMS,YAAY,EAAKT,MAAMU,UAAUT,UAAU,0BAA7E,SACA,4BAAQO,QAAS,kBAAM,EAAKR,MAAMW,SAAS,EAAKX,MAAMU,QAAQE,KAAKX,UAAU,8BAA7E,a,wCAMJ,IAAIY,EAAe,aAEnB,OADAA,GAA8C,IAA7BR,KAAKL,MAAMU,QAAQI,MAAe,eAAiB,e,iCAI5D,IACAA,EAAUT,KAAKL,MAAMU,QAArBI,MACR,OAAiB,IAAVA,EAAc,OAASA,M,GAnBdC,aCWTC,E,iLATD,IAAD,OACL,OAAQ,6BACJ,4BAAQf,UAAU,6BAC9BO,QAASH,KAAKL,MAAMiB,iBADR,kBAETZ,KAAKL,MAAMkB,SAASC,KAAI,SAAAT,GAAO,OAAK,kBAAC,EAAD,CAAWU,IAAKV,EAAQE,GAAIF,QAASA,EAASC,SAAU,EAAKX,MAAMW,SAAUF,YAAa,EAAKT,MAAMS,sB,GALlHM,aC4CXM,G,iNAzCbC,MAAQ,CACFJ,SAAU,CACN,CAAEN,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,K,EAI1BS,gBAAkB,SAAAb,GACd,IAAMc,EAAY,YAAO,EAAKF,MAAMJ,UAC9BO,EAAID,EAAaE,QAAQhB,GAC/Bc,EAAaC,GAAb,eAAsBf,GACtBc,EAAaC,GAAGX,QAChB,EAAKa,SAAS,CAAET,SAAUM,K,EAG9BI,mBAAqB,SAACC,GAClB,IAAML,EAAe,EAAKF,MAAMJ,SAASY,QAAO,SAAAC,GAAC,OAAIA,EAAEnB,KAAOiB,KAC9D,EAAKF,SAAU,CAAET,SAAUM,K,EAG/BQ,oBAAsB,WAClB,IAAMR,EAAe,EAAKF,MAAMJ,SAASC,KAAI,SAAAc,GAEzC,OADAA,EAAGnB,MAAQ,EACJmB,KAEX,EAAKN,SAAS,CAAET,SAAUM,K,wEAG5B,OACE,kBAAC,IAAMU,SAAP,KACA,kBAAC,EAAD,CAAM/B,WAAYE,KAAKiB,MAAMJ,SAASC,KAAI,SAAAgB,GAAI,OACpDA,EAAKrB,SAAOsB,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,OACpC,0BAAMrC,UAAU,aACd,kBAAC,EAAD,CAAaiB,SAAUb,KAAKiB,MAAMJ,SAAUD,gBAAiBZ,KAAK2B,oBAAqBrB,SAAUN,KAAKuB,mBAAoBnB,YAAaJ,KAAKkB,wB,GAnClIR,cCOEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b17bfc00.chunk.js","sourcesContent":["import React from 'react';\n\nconst Cart = (props) => {\n    return (<nav className=\"navbar navbar-dark bg-dark\">\n    <a className=\"navbar-brand\" href=\"#\">\n        Cart - Total Items\n        <span className=\"badge badge-pill badge-info\">{props.totalItems}</span>\n    </a>\n</nav>);\n};\n\nexport default Cart;","import React, { Component } from 'react';\n\nclass MyCounter extends Component {\n    render() {\n        return (\n        <div>\n            <span className={this.setBadgeClasses()}>{this.formatCt()}</span>\n            <button onClick={() => this.props.onIncrement(this.props.counter)} className=\"btn btn-primary btn-sm\">Add 1</button>\n            <button onClick={() => this.props.onDelete(this.props.counter.id)} className=\"btn btn-warning btn-sm m-3\">Delete</button>\n        </div>\n        );\n    };\n\n    setBadgeClasses() {\n        let badgeclasses = \"badge m-3 \";\n        badgeclasses += (this.props.counter.value === 0) ? \"badge-danger\" : \"badge-info\";\n        return badgeclasses;\n    };\n\n    formatCt() {\n        const { value } = this.props.counter;\n        return value === 0 ? \"Zero\" : value;\n    };\n}\n\nexport default MyCounter;","import React, { Component } from 'react';\nimport MyCounter from './mycounter';\n\nclass LstCounters extends Component {\n    render() {\n        return (<div>\n            <button className=\"btn btn-primary btn-sm m-3\"\nonClick={this.props.onClearCounters}>Clear Counters</button>\n { this.props.counters.map(counter => (<MyCounter key={counter.id} counter={counter} onDelete={this.props.onDelete} onIncrement={this.props.onIncrement} />)) }\n        </div>)\n    }\n}\n\nexport default LstCounters;","import React, { Component } from 'react';\nimport Cart from './components/cart';\nimport LstCounters from './components/lstcounters';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n        counters: [\n            { id: 1, value: 3 },\n            { id: 2, value: 0 },\n            { id: 3, value: 0 }\n        ]\n    };\n\n  handleAddButton = counter => {\n      const tempcounters = [...this.state.counters];\n      const i = tempcounters.indexOf(counter);\n      tempcounters[i] = {...counter};\n      tempcounters[i].value++;\n      this.setState({ counters: tempcounters });\n  };\n\n  handleDeleteButton = (countersId) => {\n      const tempcounters = this.state.counters.filter(c => c.id !== countersId);\n      this.setState( { counters: tempcounters });\n  };\n\n  handleClearCounters = () => {\n      const tempcounters = this.state.counters.map(ct => {\n          ct.value = 0;\n          return ct;\n      });\n      this.setState({ counters: tempcounters })\n  };\n  render() {\n    return (\n      <React.Fragment>\n      <Cart totalItems={this.state.counters.map(item =>\nitem.value).reduce((prev, next) => prev + next)} />\n      <main className=\"container\">\n        <LstCounters counters={this.state.counters} onClearCounters={this.handleClearCounters} onDelete={this.handleDeleteButton} onIncrement={this.handleAddButton} />\n      </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}